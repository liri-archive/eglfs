name: CI

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

jobs:
#  build:
#    if: "!contains(github.event.head_commit.message, 'ci skip')"
#    strategy:
#      matrix:
#        compiler:
#          - gcc
#          - clang
#        qt:
#          - 5.12.7
#          - 5.14.1
#    runs-on: ubuntu-latest
#    steps:
#      - name: Extract branch name
#        id: extract_branch
#        shell: bash
#        run: |
#          if [ -n "${{ github.base_ref }}" ]; then
#            echo "##[set-output name=branch;]${{ github.base_ref }}"
#          else
#            github_ref=${{ github.ref }}
#            echo "##[set-output name=branch;]${github_ref##*/}"
#          fi
#      - name: Qt version identifier
#        id: qt_version
#        shell: bash
#        run: |
#          qtverid=`echo "${{ matrix.qt }}" | awk -F. '{ print $1$2 }'`
#          echo "##[set-output name=id;]${qtverid}"
#      - name: Install dependencies
#        run: |
#          QTPFX=qt${{ steps.qt_version.outputs.id }}
#          set -x
#          wget -qO - 'http://archive.neon.kde.org/public.key' | sudo apt-key add -
#          sudo apt-add-repository http://archive.neon.kde.org/user
#          sudo add-apt-repository ppa:beineri/opt-qt-${{ matrix.qt }}-bionic
#          sudo apt-get update
#          sudo apt-get install -y \
#            extra-cmake-modules \
#            dbus-x11 \
#            xvfb \
#            libudev-dev \
#            libinput-dev \
#            libgbm-dev \
#            libdrm-dev \
#            libxkbcommon-dev \
#            libegl1-mesa-dev \
#            ${QTPFX}base \
#            ${QTPFX}declarative
#          if [ "${{ matrix.compiler }}" == "clang" ]; then
#            sudo apt-get install -y clang
#          fi
#      - name: Fetch cmake-shared artifact
#        uses: liri-infra/fetch-artifact@master
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          repository: lirios/cmake-shared
#          workflow_path: .github/workflows/build.yml
#          artifact_name: artifacts-${{ steps.extract_branch.outputs.branch }}
#          save_as: cmake-shared.zip
#      - name: Fetch qtudev artifact
#        uses: liri-infra/fetch-artifact@master
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          repository: lirios/qtudev
#          workflow_path: .github/workflows/build.yml
#          artifact_name: artifacts-${{ matrix.compiler }}-${{ steps.qt_version.outputs.id }}-${{ steps.extract_branch.outputs.branch }}
#          save_as: qtudev.zip
#      - name: Fetch libliri artifact
#        uses: liri-infra/fetch-artifact@master
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          repository: lirios/libliri
#          workflow_path: .github/workflows/build.yml
#          artifact_name: artifacts-${{ matrix.compiler }}-${{ steps.qt_version.outputs.id }}-${{ steps.extract_branch.outputs.branch }}
#          save_as: libliri.zip
#      - name: Uncompress artifacts
#        run: |
#          set -x
#          for what in cmake-shared qtudev libliri; do
#              sudo tar xf ${what}.tar.gz -C /
#              rm -f ${what}.zip ${what}.tar.gz
#          done
#      - uses: actions/checkout@v2
#      - name: Build
#        run: |
#          QTPFX=qt${{ steps.qt_version.outputs.id }}
#          set -x
#          export QT_PATH=/opt/${QTPFX}
#          export PATH=$QT_PATH/bin:$PATH
#          export LD_LIBRARY_PATH=$QT_PATH/lib/x86_64-linux-gnu:$QT_PATH/lib:$LD_LIBRARY_PATH
#          export PKG_CONFIG_PATH=$QT_PATH/lib/pkgconfig:$PKG_CONFIG_PATH
#          if [ "${{ matrix.compiler }}" == "clang" ]; then
#            export CC=clang
#            export CXX=clang++
#          fi
#          mkdir -p build
#          cd build
#          cmake .. -DCMAKE_INSTALL_PREFIX=/usr
#          make -j $(getconf _NPROCESSORS_ONLN)
#          sudo make install
#      - name: Package
#        if: github.event_name == 'push'
#        run: |
#          cd build
#          mkdir -p artifacts
#          tar czf artifacts/eglfs.tar.gz -T install_manifest.txt
#      - name: Archive result
#        if: github.event_name == 'push'
#        uses: actions/upload-artifact@v1
#        with:
#          name: artifacts-${{ matrix.compiler }}-${{ steps.qt_version.outputs.id }}-${{ steps.extract_branch.outputs.branch }}
#          path: build/artifacts/

  # ppa:beineri is built with -no-egl and cannot be used for some repositories like eglfs
  neon:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      matrix:
        compiler:
          - gcc
          - clang
    runs-on: ubuntu-18.04
    steps:
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          if [ -n "${{ github.base_ref }}" ]; then
            echo "##[set-output name=branch;]${{ github.base_ref }}"
          else
            github_ref=${{ github.ref }}
            echo "##[set-output name=branch;]${github_ref##*/}"
          fi
      - name: Install dependencies
        run: |
          set -x
          wget -qO - 'http://archive.neon.kde.org/public.key' | sudo apt-key add -
          sudo apt-add-repository http://archive.neon.kde.org/user
          sudo apt-get update
          sudo apt-get install -y \
            extra-cmake-modules \
            dbus-x11 \
            xvfb \
            libudev-dev \
            libinput-dev \
            libgbm-dev \
            libdrm-dev \
            libxkbcommon-dev \
            libegl1-mesa-dev \
            qtbase5-dev \
            qtbase5-private-dev \
            qtdeclarative5-dev
      - name: Fetch cmake-shared artifact
        uses: liri-infra/fetch-artifact@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository: lirios/cmake-shared
          workflow_path: .github/workflows/build.yml
          artifact_name: artifacts-${{ steps.extract_branch.outputs.branch }}
          save_as: cmake-shared.zip
      - name: Fetch qtudev artifact
        uses: liri-infra/fetch-artifact@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository: lirios/qtudev
          workflow_path: .github/workflows/build.yml
          artifact_name: artifacts-${{ matrix.compiler }}-${{ steps.extract_branch.outputs.branch }}
          save_as: qtudev.zip
      - name: Fetch libliri artifact
        uses: liri-infra/fetch-artifact@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository: lirios/libliri
          workflow_path: .github/workflows/build.yml
          artifact_name: artifacts-${{ matrix.compiler }}-${{ steps.extract_branch.outputs.branch }}
          save_as: libliri.zip
      - name: Uncompress artifacts
        run: |
          set -x
          for what in cmake-shared qtudev libliri; do
              sudo tar xf ${what}.tar.gz -C /
              rm -f ${what}.zip ${what}.tar.gz
          done
      - uses: actions/checkout@v2
      - name: Build
        run: |
          set -x
          if [ "${{ matrix.compiler }}" == "clang" ]; then
            export CC=clang
            export CXX=clang++
          fi
          mkdir -p build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=/usr
          make -j $(getconf _NPROCESSORS_ONLN)
          sudo make install
      - name: Package
        if: github.event_name == 'push'
        run: |
          cd build
          mkdir -p artifacts
          tar czf artifacts/eglfs.tar.gz -T install_manifest.txt
      - name: Archive result
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v1
        with:
          name: artifacts-${{ matrix.compiler }}-${{ steps.extract_branch.outputs.branch }}
          path: build/artifacts/
